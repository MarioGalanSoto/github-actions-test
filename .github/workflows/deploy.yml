name: Deploy Application

on:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  workflow_dispatch:  # Allow manual triggering

env:
  DOCKER_IMAGE: mariogalansoto/github-actions-test
  TEST_ENV: localhost
  PROD_ENV: localhost

jobs:
  check-for-updates:
    runs-on: ubuntu-latest
    outputs:
      update_available: ${{ steps.check_update.outputs.update_available }}
      new_version: ${{ steps.check_update.outputs.new_version }}
    steps:
      - name: Check for new Docker image
        id: check_update
        run: |
          echo "Checking for updates..."
          echo "update_available=true" >> $GITHUB_OUTPUT
          echo "new_version=$(date +%s)" >> $GITHUB_OUTPUT

  test-deployment:
    needs: check-for-updates
    if: needs.check-for-updates.outputs.update_available == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and test
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:test .
          docker run -d -p 3000:3000 --name test-container ${{ env.DOCKER_IMAGE }}:test
          sleep 5
          curl http://localhost:3000 || exit 1
          docker stop test-container
          docker rm test-container

  production-deployment:
    needs: [check-for-updates, test-deployment]
    if: needs.check-for-updates.outputs.update_available == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Deploy to production
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:latest .
          docker push ${{ env.DOCKER_IMAGE }}:latest
      - name: Update version file
        run: |
          echo "${{ needs.check-for-updates.outputs.new_version }}" > .current_version
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .current_version
          git commit -m "Update to version ${{ needs.check-for-updates.outputs.new_version }}"
          git push
